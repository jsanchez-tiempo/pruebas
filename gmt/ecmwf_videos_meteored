#!/bin/bash
###############################################################################
# Script que genera los vídeos diarios automáticos de meteored.
#
#
# Uso:
# ecmwf_videos_meteored [YYYYMMDD] HH
#
# Marcos Molina Cano <marcosmolina.tiempo@gmail.com>
# Guillermo Ballester Valor <gbvalor@gmail.com>
# Juan Sánchez Segura <jsanchez.tiempo@gmail.com>                    12/11/2018
###############################################################################
# Nombre del script.
scriptName=$(basename $0 .sh)

# Formato de fecha para el fichero .log.
function datePID {
  echo "$(date -u +%Y/%m/%d\ %H:%M:%S) UTC [$$]"
}

# Función que define la ayuda sobre este script.
function showUsage {
  echo
  echo " Uso: ${scriptName} [AAAAMMDD] HH"
  echo
  echo "      [AAAAMMDD] - Fecha de inicio de la pasada."
  echo "              HH - Hora de inicio de la pasada."
  echo
}

# Control de argumentos de entrada.
if [ ${#} -eq 2 ] ; then
  fecha=${1}
  if [ ${2} = "00" ] || [ ${2} = "12" ] ; then
    pasada=${2}
  else
    showUsage
    exit 1
   fi
elif [ ${#} -eq 1 ] ; then
  if [ ${1} = "00" ] || [ ${1} = "12" ] ; then
    fecha=$(date -u +%Y%m%d)
    pasada=${1}
  else
    showUsage
    exit 1
   fi
else
  showUsage
  exit 1
fi

# Añadido para que funcione gdal.
LD_LIBRARY_PATH="/usr/local/lib:/usr/lib"
export LD_LIBRARY_PATH


# Directorios a usar.
#BASE_DIR="/home/cep/videos"
BASE_DIR="/home/juan/Proyectos/pruebas/gmt"
fileconfig=${BASE_DIR}/cronvideos.config

OUT_DIR="${BASE_DIR}/outputs"
WEB_DIR="/var/www/videos"
mkdir -p ${OUT_DIR}

lock="${OUT_DIR}/${scriptName}_${fecha}_${pasada}.lock"
log="${OUT_DIR}/${scriptName}_${fecha}_${pasada}.log"
finished="${OUT_DIR}/finished_${scriptName}_${fecha}_${pasada}"

# Definimos que el script pare si se captura alguna señal de terminación o se produce algún error
trap "rm -f ${lock}; echo 'error: señal interceptada. Saliendo' >&2;exit 1" 1 2 3 15


# ¿Trabajo ya terminado?
if [ -e ${finished} ] ; then
  exit
fi

# Comprobamos si el trabajo ya se está realizando. Si existe
# el fichero ${lock} y tiene menos de 3 horas entonces acaba.
# Si tiene más de 3 horas, consideramos que el proceso se ha colgado, lo matamos
# y continuamos.
if [ -e ${lock} ] ; then
  if [ "$(stat -c %Y ${lock})" -lt "$(date -u +%s --date="3 hours ago")" ] ; then
    oldpid=$(cat ${lock})
    oldpgid=`ps -o pgid= --pid ${oldpid} | tr -d " "`
    etimefile=$((`date  +%s` - `stat -c %Y ${lock}`))
    etimeprocess=`ps -o etimes= --pid ${oldpid} | tr -d " "`

    # El tiempo de creación del proceso tiene que ser mayor o igual que el del fichero lock
    [ ${etimeprocess} -ge ${etimefile} ] && kill -9 -${oldpgid}


    echo $$ > ${lock} # Problemas: el fichero ${lock} es muy antiguo.
  else
    exit # Ya está ocupado.
  fi
else
  echo $$ > ${lock}
fi




count=0
fechapasada="${fecha}${pasada}"

# Leemos desde un fichero de configuración los parámetros del script
while read -r line
do
    cod=`echo ${line} | awk -F ";" '{print $1}' | tr -d " "`
    start=`echo ${line} | awk -F ";" '{print $2}' | tr -d " "`
    end=`echo ${line} | awk -F ";" '{print $3}' | tr -d " "`
    tipo=`echo ${line} | awk -F ";" '{print $4}' | tr -d " "`
    zonageog=`echo ${line} | awk -F ";" '{print $5}' | tr -d " "`
    estilo=`echo ${line} | awk -F ";" '{print $6}' | tr -d " "`
    minutos=`echo ${line} | awk -F ";" '{print $7}' | tr -d " "`
    slowmotion=`echo ${line} | awk -F ";" '{print $8}' | tr -d " "`
    viento=`echo ${line} | awk -F ";" '{print $9}' | tr -d " "`
    presion=`echo ${line} | awk -F ";" '{print $10}' | tr -d " "`
    border=`echo ${line} | awk -F ";" '{print $11}' | tr -d " "`
    nstartframes=`echo ${line} | awk -F ";" '{print $12}' | tr -d " "`
    nendframes=`echo ${line} | awk -F ";" '{print $13}' | tr -d " " `
    titulo=`echo ${line} | awk -F ";" '{print $14}' | sed 's/^[[:space:]]*//'`

    fechainicio=`date -d "${fecha} ${pasada} +${start} hours" +%Y%m%d%H`
    fechafin=`date -d "${fecha} ${pasada} +${end} hours" +%Y%m%d%H`

    outputFile=${OUT_DIR}/${fechapasada}_`printf %03d ${start}`_`printf %03d ${end}`_${cod}_${tipo}_${zonageog}.mp4
    tstFile=${outputFile}.tst

    [ ${zonageog} == "-" ] && zonageog="" || zonageog="-g ${zonageog}.cfg"
    [ ${estilo} == "-" ] && estilo="" || estilo="-e ${estilo}.cfg"
    [ ${minutos} == "-" ] && minutos="" || minutos="-m ${minutos}"
    [ ${slowmotion} == "-" ] && slowmotion="" || slowmotion="-s ${slowmotion}"
    [ ${viento} == "-" ] && viento="" || viento="-v ${viento}"
    [ ${presion} == "-" ] && presion="" || presion="-p ${presion}"
    [ ${border} == "-" ] && border="" || border="--border ${border}"
    [ ${nstartframes} == "-" ] && nstartframes="" || nstartframes="--nstart_frames ${nstartframes}"
    [ ${nendframes} == "-" ] && nendframes="" || nendframes="--nend_frames ${nendframes}"
    [[ ${titulo} == "-" ]] && titulo="" || titulo="-t ${titulo}"


    # Si no existe el fichero testigo lanzamos la ejecución del script de animación
    if [ ! -e ${tstFile} ]
    then

        tstarray[${count}]=${tstFile}
        count=$((${count}+1))

        echo "$(datePID): ${cod} ${tipo} ${fechapasada} `printf %03d ${start}`-`printf %03d ${end}` ... "

        ${BASE_DIR}/animacion.sh ${tipo} ${fechainicio} ${fechafin} -d ${fechapasada} -f ${outputFile} ${zonageog} ${estilo}\
        ${minutos} ${slowmotion} ${viento} ${presion} ${border} ${nstartframes} ${nendframes} "${titulo}" >> ${log} 2>&1

        if [ $? -eq 0 ]
        then
            echo "$(datePID): ${cod} ${tipo} ${fechapasada} `printf %03d ${start}`-`printf %03d ${end}` ok "
            touch ${tstFile}
            mv ${outputFile} ${WEB_DIR}/
        else
            echo "$(datePID): ${cod} ${tipo} ${fechapasada} `printf %03d ${start}`-`printf %03d ${end}` error "
        fi
    else
        echo "$(datePID): ${cod} ${tipo} ${fechapasada} `printf %03d ${start}`-`printf %03d ${end}` Generado anteriormente "
    fi
    touch ${lock}

done  < <(sed '1d; /^[[:space:]]*#.*$/d' ${fileconfig})




for ((i=0; i<${count}; i++)) ; do

  # Se comprueba que se han generado todos los ficheros testigo.
  if [ ! -e ${tstarray[${i}]} ] ; then
    rm ${lock}
    exit
  fi
done


# Se limpian ficheros y directorios antiguos.
find "${OUT_DIR}" -name "finished_${scriptName}"        -mtime +1 -type f -exec rm  -f   '{}' \;
find "${OUT_DIR}" -name "${scriptName}_????????_??.log" -mtime +7 -type f -exec rm  -f   '{}' \;
find "${WEB_DIR}" -name "*.mp4"                         -mtime +7 -type f -exec rm  -f   '{}' \;

# Si llega aquí ha terminado el trabajo.
mv ${lock} ${finished}
echo "$(datePID): Fin."
echo


